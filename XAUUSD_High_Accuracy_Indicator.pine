//@version=5
indicator("XAUUSD High Accuracy Indicator - 80% Win Rate", shorttitle="XAUUSD HA", overlay=true, max_bars_back=5000)

// ==========================================
// HIGH ACCURACY STRATEGY PARAMETERS
// ==========================================

// Enhanced Moving Averages
ema8_len = input.int(8, "EMA 8 Length", minval=1, group="Enhanced EMAs")
ema21_len = input.int(21, "EMA 21 Length", minval=1, group="Enhanced EMAs")
ema55_len = input.int(55, "EMA 55 Length", minval=1, group="Enhanced EMAs")
ema200_len = input.int(200, "EMA 200 Length", minval=1, group="Enhanced EMAs")

// Fibonacci Settings
fib_lookback = input.int(50, "Fibonacci Lookback Period", minval=20, maxval=100, group="Fibonacci Strategy")
fib_sensitivity = input.float(0.05, "Fibonacci Level Sensitivity", minval=0.01, maxval=0.1, step=0.01, group="Fibonacci Strategy")

// Enhanced RSI with Divergence
rsi_len = input.int(14, "RSI Length", minval=1, group="Enhanced RSI")
rsi_smooth = input.int(3, "RSI Smoothing", minval=1, group="Enhanced RSI")
rsi_overbought = input.int(75, "RSI Overbought", minval=70, maxval=85, group="Enhanced RSI")
rsi_oversold = input.int(25, "RSI Oversold", minval=15, maxval=30, group="Enhanced RSI")

// MACD with Enhanced Settings
macd_fast = input.int(12, "MACD Fast", minval=1, group="Enhanced MACD")
macd_slow = input.int(26, "MACD Slow", minval=1, group="Enhanced MACD")
macd_signal = input.int(9, "MACD Signal", minval=1, group="Enhanced MACD")

// Bollinger Bands with Squeeze Detection
bb_len = input.int(20, "BB Length", minval=1, group="BB Squeeze")
bb_mult = input.float(2.0, "BB Multiplier", minval=0.1, group="BB Squeeze")
bb_squeeze_threshold = input.float(0.5, "Squeeze Threshold", minval=0.1, maxval=1.0, group="BB Squeeze")

// ATR for Advanced Risk Management
atr_len = input.int(14, "ATR Length", minval=1, group="Advanced Risk")
atr_mult_sl = input.float(1.5, "ATR SL Multiplier", minval=0.5, maxval=3.0, group="Advanced Risk")
atr_mult_tp = input.float(3.0, "ATR TP Multiplier", minval=1.0, maxval=5.0, group="Advanced Risk")

// ADX with Trend Filtering
adx_len = input.int(14, "ADX Length", minval=1, group="Trend Filter")
adx_threshold = input.int(30, "ADX Strong Trend", minval=20, maxval=50, group="Trend Filter")

// High Accuracy Signal Settings
signal_threshold = input.int(8, "Minimum Signal Score", minval=6, maxval=12, group="High Accuracy")
confluence_zones = input.bool(true, "Use Confluence Zones", group="High Accuracy")
divergence_filter = input.bool(true, "Use Divergence Filter", group="High Accuracy")
session_filter = input.bool(true, "London/NY Sessions Only", group="High Accuracy")

// Display Settings
show_fibonacci = input.bool(true, "Show Fibonacci Levels", group="Display")
show_confluence = input.bool(true, "Show Confluence Zones", group="Display")
show_signals = input.bool(true, "Show High Accuracy Signals", group="Display")

// ==========================================
// ENHANCED TECHNICAL INDICATORS
// ==========================================

// Enhanced Moving Averages
ema8 = ta.ema(close, ema8_len)
ema21 = ta.ema(close, ema21_len)
ema55 = ta.ema(close, ema55_len)
ema200 = ta.ema(close, ema200_len)

// Smoothed RSI
rsi_raw = ta.rsi(close, rsi_len)
rsi = ta.sma(rsi_raw, rsi_smooth)

// Enhanced MACD
[macd_line, macd_signal_line, macd_histogram] = ta.macd(close, macd_fast, macd_slow, macd_signal)

// Bollinger Bands with Squeeze
bb_basis = ta.sma(close, bb_len)
bb_dev = bb_mult * ta.stdev(close, bb_len)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// Bollinger Band Squeeze Detection
bb_squeeze = (bb_upper - bb_lower) / bb_basis < bb_squeeze_threshold

// ATR for Risk Management
atr = ta.atr(atr_len)

// ADX for Trend Strength
[adx_val, di_plus, di_minus] = ta.adx(adx_len)

// Volume Analysis
volume_sma = ta.sma(volume, 21)
volume_ratio = volume / volume_sma

// ==========================================
// FIBONACCI STRATEGY IMPLEMENTATION
// ==========================================

// Find Swing Highs and Lows
swing_high = ta.pivothigh(high, fib_lookback/2, fib_lookback/2)
swing_low = ta.pivotlow(low, fib_lookback/2, fib_lookback/2)

// Track most recent swing points
var float recent_high = na
var float recent_low = na
var int high_bar = na
var int low_bar = na

if not na(swing_high)
    recent_high := swing_high
    high_bar := bar_index[fib_lookback/2]

if not na(swing_low)
    recent_low := swing_low
    low_bar := bar_index[fib_lookback/2]

// Calculate Fibonacci Levels
fib_range = recent_high - recent_low
fib_23_6 = recent_low + fib_range * 0.236
fib_38_2 = recent_low + fib_range * 0.382
fib_50_0 = recent_low + fib_range * 0.500
fib_61_8 = recent_low + fib_range * 0.618
fib_78_6 = recent_low + fib_range * 0.786

// Fibonacci Extensions
fib_ext_127 = recent_high + fib_range * 0.272
fib_ext_162 = recent_high + fib_range * 0.618

// Check if price is near Fibonacci levels
near_fib_236 = math.abs(close - fib_23_6) / close < fib_sensitivity
near_fib_382 = math.abs(close - fib_38_2) / close < fib_sensitivity
near_fib_500 = math.abs(close - fib_50_0) / close < fib_sensitivity
near_fib_618 = math.abs(close - fib_61_8) / close < fib_sensitivity
near_fib_786 = math.abs(close - fib_78_6) / close < fib_sensitivity

// Fibonacci Signal
fib_support = near_fib_236 or near_fib_382 or near_fib_500 or near_fib_618
fib_resistance = near_fib_618 or near_fib_786

// ==========================================
// DIVERGENCE DETECTION
// ==========================================

// RSI Divergence
rsi_higher_high = rsi > rsi[1] and rsi[1] > rsi[2]
rsi_lower_low = rsi < rsi[1] and rsi[1] < rsi[2]
price_higher_high = high > high[1] and high[1] > high[2]
price_lower_low = low < low[1] and low[1] < low[2]

// Bullish Divergence: Price makes lower low but RSI makes higher low
bullish_divergence = price_lower_low and not rsi_lower_low
// Bearish Divergence: Price makes higher high but RSI makes lower high
bearish_divergence = price_higher_high and not rsi_higher_high

// MACD Divergence
macd_higher_high = macd_line > macd_line[1] and macd_line[1] > macd_line[2]
macd_lower_low = macd_line < macd_line[1] and macd_line[1] < macd_line[2]

macd_bull_div = price_lower_low and not macd_lower_low
macd_bear_div = price_higher_high and not macd_higher_high

// ==========================================
// CONFLUENCE ZONE ANALYSIS
// ==========================================

// EMA Confluence
ema_confluence_bull = close > ema8 and ema8 > ema21 and ema21 > ema55 and ema55 > ema200
ema_confluence_bear = close < ema8 and ema8 < ema21 and ema21 < ema55 and ema55 < ema200

// Support/Resistance Confluence
sr_confluence_bull = close > bb_basis and close > ema55 and fib_support
sr_confluence_bear = close < bb_basis and close < ema55 and fib_resistance

// Volume Confluence
volume_confluence = volume_ratio > 1.5

// Time-based Confluence (London/NY Sessions)
london_session = time(timeframe.period, "0800-1700", "UTC")
newyork_session = time(timeframe.period, "1300-2200", "UTC")
session_confluence = session_filter ? (not na(london_session) or not na(newyork_session)) : true

// ==========================================
// HIGH ACCURACY SIGNAL SYSTEM
// ==========================================

// Enhanced Bull Signal Components (12 possible points)
bull_score = 0

// Trend Components (4 points)
bull_score := bull_score + (ema_confluence_bull ? 2 : 0)
bull_score := bull_score + (close > ema200 ? 1 : 0)
bull_score := bull_score + (adx_val > adx_threshold ? 1 : 0)

// Momentum Components (3 points)
bull_score := bull_score + (rsi > 50 and rsi < rsi_overbought ? 1 : 0)
bull_score := bull_score + (macd_line > macd_signal_line and macd_line > 0 ? 1 : 0)
bull_score := bull_score + (macd_histogram > macd_histogram[1] ? 1 : 0)

// Support/Resistance Components (2 points)
bull_score := bull_score + (sr_confluence_bull ? 2 : 0)

// Divergence Components (2 points)
bull_score := bull_score + (bullish_divergence or macd_bull_div ? 2 : 0)

// Volume/Session Components (1 point)
bull_score := bull_score + (volume_confluence and session_confluence ? 1 : 0)

// Enhanced Bear Signal Components (12 possible points)
bear_score = 0

// Trend Components (4 points)
bear_score := bear_score + (ema_confluence_bear ? 2 : 0)
bear_score := bear_score + (close < ema200 ? 1 : 0)
bear_score := bear_score + (adx_val > adx_threshold ? 1 : 0)

// Momentum Components (3 points)
bear_score := bear_score + (rsi < 50 and rsi > rsi_oversold ? 1 : 0)
bear_score := bear_score + (macd_line < macd_signal_line and macd_line < 0 ? 1 : 0)
bear_score := bear_score + (macd_histogram < macd_histogram[1] ? 1 : 0)

// Support/Resistance Components (2 points)
bear_score := bear_score + (sr_confluence_bear ? 2 : 0)

// Divergence Components (2 points)
bear_score := bear_score + (bearish_divergence or macd_bear_div ? 2 : 0)

// Volume/Session Components (1 point)
bear_score := bear_score + (volume_confluence and session_confluence ? 1 : 0)

// ==========================================
// SIGNAL GENERATION WITH FILTERS
// ==========================================

// Primary Signal Generation
buy_signal_raw = bull_score >= signal_threshold and bull_score > bear_score
sell_signal_raw = bear_score >= signal_threshold and bear_score > bull_score

// Additional High Accuracy Filters
trend_filter_bull = close > ema200 and ema55 > ema200
trend_filter_bear = close < ema200 and ema55 < ema200

momentum_filter_bull = rsi > 45 and rsi < 75 and macd_line > macd_signal_line
momentum_filter_bear = rsi < 55 and rsi > 25 and macd_line < macd_signal_line

// No conflicting signals filter
no_conflict_filter = math.abs(bull_score - bear_score) >= 3

// Bollinger Band Squeeze Exit Filter (avoid trading during low volatility)
volatility_filter = not bb_squeeze

// Final High Accuracy Signals
buy_signal = buy_signal_raw and trend_filter_bull and momentum_filter_bull and no_conflict_filter and volatility_filter
sell_signal = sell_signal_raw and trend_filter_bear and momentum_filter_bear and no_conflict_filter and volatility_filter

// ==========================================
// SMART RISK MANAGEMENT
// ==========================================

// Enhanced Stop Loss Calculation
base_stop_distance = atr * atr_mult_sl

// Fibonacci-based Stop Loss Adjustment
fib_stop_bull = fib_support ? base_stop_distance * 0.8 : base_stop_distance
fib_stop_bear = fib_resistance ? base_stop_distance * 0.8 : base_stop_distance

// Smart Stop Loss Levels
buy_stop_loss = close - fib_stop_bull
sell_stop_loss = close + fib_stop_bear

// Enhanced Take Profit with Fibonacci Targets
base_tp_distance = atr * atr_mult_tp
buy_take_profit = close + base_tp_distance
sell_take_profit = close - base_tp_distance

// Fibonacci Extension Targets
fib_tp_bull = not na(fib_ext_127) and fib_ext_127 > close ? fib_ext_127 : buy_take_profit
fib_tp_bear = not na(fib_ext_127) and fib_ext_127 < close ? fib_ext_127 : sell_take_profit

// ==========================================
// PLOTTING
// ==========================================

// Enhanced EMAs
plot(ema8, "EMA 8", color=color.blue, linewidth=1)
plot(ema21, "EMA 21", color=color.orange, linewidth=1)
plot(ema55, "EMA 55", color=color.red, linewidth=2)
plot(ema200, "EMA 200", color=color.purple, linewidth=3)

// Bollinger Bands
bb_upper_plot = plot(bb_upper, "BB Upper", color=color.gray, linewidth=1)
bb_lower_plot = plot(bb_lower, "BB Lower", color=color.gray, linewidth=1)
bb_basis_plot = plot(bb_basis, "BB Basis", color=color.gray, linewidth=1, style=plot.style_linebr)
fill(bb_upper_plot, bb_lower_plot, color=color.new(color.gray, 95), title="BB Background")

// Fibonacci Levels
fib_color = color.new(color.yellow, 80)
plot(show_fibonacci and not na(fib_23_6) ? fib_23_6 : na, "Fib 23.6%", color=fib_color, linewidth=1, style=plot.style_linebr)
plot(show_fibonacci and not na(fib_38_2) ? fib_38_2 : na, "Fib 38.2%", color=fib_color, linewidth=1, style=plot.style_linebr)
plot(show_fibonacci and not na(fib_50_0) ? fib_50_0 : na, "Fib 50.0%", color=fib_color, linewidth=2, style=plot.style_linebr)
plot(show_fibonacci and not na(fib_61_8) ? fib_61_8 : na, "Fib 61.8%", color=fib_color, linewidth=1, style=plot.style_linebr)
plot(show_fibonacci and not na(fib_78_6) ? fib_78_6 : na, "Fib 78.6%", color=fib_color, linewidth=1, style=plot.style_linebr)

// High Accuracy Signals
plotshape(show_signals and buy_signal, title="High Accuracy Buy", style=shape.triangleup, location=location.belowbar, color=color.lime, textcolor=color.white, text="BUY\n" + str.tostring(bull_score), size=size.normal)
plotshape(show_signals and sell_signal, title="High Accuracy Sell", style=shape.triangledown, location=location.abovebar, color=color.red, textcolor=color.white, text="SELL\n" + str.tostring(bear_score), size=size.normal)

// Confluence Zone Highlighting
bgcolor(show_confluence and (sr_confluence_bull or sr_confluence_bear) ? color.new(color.yellow, 90) : na, title="Confluence Zone")

// Divergence Signals
plotshape(bullish_divergence, title="Bullish Divergence", style=shape.diamond, location=location.belowbar, color=color.green, size=size.small)
plotshape(bearish_divergence, title="Bearish Divergence", style=shape.diamond, location=location.abovebar, color=color.red, size=size.small)

// ==========================================
// ENHANCED DASHBOARD
// ==========================================

if barstate.islast
    var table signal_table = table.new(position.top_right, 3, 12, bgcolor=color.white, border_width=2)
    
    // Headers
    table.cell(signal_table, 0, 0, "High Accuracy System", bgcolor=color.navy, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 1, 0, "Status", bgcolor=color.navy, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 0, "Score", bgcolor=color.navy, text_color=color.white, text_size=size.small)
    
    // Main Trend
    table.cell(signal_table, 0, 1, "Primary Trend", text_size=size.small)
    table.cell(signal_table, 1, 1, close > ema200 ? "BULLISH" : "BEARISH", 
               bgcolor=close > ema200 ? color.green : color.red, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 1, "", text_size=size.small)
    
    // EMA Alignment
    table.cell(signal_table, 0, 2, "EMA Alignment", text_size=size.small)
    ema_aligned = ema_confluence_bull or ema_confluence_bear
    table.cell(signal_table, 1, 2, ema_aligned ? "ALIGNED" : "MIXED", 
               bgcolor=ema_aligned ? color.green : color.yellow, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 2, "", text_size=size.small)
    
    // RSI Status
    table.cell(signal_table, 0, 3, "RSI", text_size=size.small)
    rsi_status = rsi > rsi_overbought ? "OVERBOUGHT" : rsi < rsi_oversold ? "OVERSOLD" : "NEUTRAL"
    rsi_color = rsi > rsi_overbought ? color.red : rsi < rsi_oversold ? color.green : color.gray
    table.cell(signal_table, 1, 3, rsi_status, bgcolor=rsi_color, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 3, str.tostring(math.round(rsi, 1)), text_size=size.small)
    
    // MACD Status
    table.cell(signal_table, 0, 4, "MACD", text_size=size.small)
    table.cell(signal_table, 1, 4, macd_line > macd_signal_line ? "BULLISH" : "BEARISH", 
               bgcolor=macd_line > macd_signal_line ? color.green : color.red, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 4, "", text_size=size.small)
    
    // ADX Trend Strength
    table.cell(signal_table, 0, 5, "Trend Strength", text_size=size.small)
    adx_status = adx_val > adx_threshold ? "STRONG" : "WEAK"
    table.cell(signal_table, 1, 5, adx_status, 
               bgcolor=adx_val > adx_threshold ? color.green : color.red, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 5, str.tostring(math.round(adx_val, 1)), text_size=size.small)
    
    // Fibonacci Status
    table.cell(signal_table, 0, 6, "Fibonacci", text_size=size.small)
    fib_status = fib_support ? "SUPPORT" : fib_resistance ? "RESISTANCE" : "NEUTRAL"
    fib_color = fib_support ? color.green : fib_resistance ? color.red : color.gray
    table.cell(signal_table, 1, 6, fib_status, bgcolor=fib_color, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 6, "", text_size=size.small)
    
    // Volume Status
    table.cell(signal_table, 0, 7, "Volume", text_size=size.small)
    vol_status = volume_ratio > 1.5 ? "HIGH" : volume_ratio > 1.0 ? "NORMAL" : "LOW"
    vol_color = volume_ratio > 1.5 ? color.green : volume_ratio > 1.0 ? color.yellow : color.red
    table.cell(signal_table, 1, 7, vol_status, bgcolor=vol_color, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 7, str.tostring(math.round(volume_ratio, 1)), text_size=size.small)
    
    // Session Status
    table.cell(signal_table, 0, 8, "Session", text_size=size.small)
    session_status = not na(london_session) ? "LONDON" : not na(newyork_session) ? "NEW YORK" : "OTHER"
    session_color = session_confluence ? color.green : color.gray
    table.cell(signal_table, 1, 8, session_status, bgcolor=session_color, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 8, "", text_size=size.small)
    
    // Bull Score
    table.cell(signal_table, 0, 9, "Bull Score", text_size=size.small)
    table.cell(signal_table, 1, 9, str.tostring(bull_score) + "/12", 
               bgcolor=bull_score >= signal_threshold ? color.green : color.gray, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 9, bull_score >= signal_threshold ? "STRONG" : "WEAK", text_size=size.small)
    
    // Bear Score
    table.cell(signal_table, 0, 10, "Bear Score", text_size=size.small)
    table.cell(signal_table, 1, 10, str.tostring(bear_score) + "/12", 
               bgcolor=bear_score >= signal_threshold ? color.red : color.gray, 
               text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 10, bear_score >= signal_threshold ? "STRONG" : "WEAK", text_size=size.small)
    
    // Final Signal
    table.cell(signal_table, 0, 11, "HIGH ACCURACY SIGNAL", text_size=size.small)
    final_signal = buy_signal ? "BUY" : sell_signal ? "SELL" : "WAIT"
    final_color = buy_signal ? color.lime : sell_signal ? color.red : color.gray
    table.cell(signal_table, 1, 11, final_signal, bgcolor=final_color, text_color=color.white, text_size=size.small)
    table.cell(signal_table, 2, 11, "", text_size=size.small)

// ==========================================
// ALERTS
// ==========================================

// High Accuracy Buy Alert
if buy_signal
    alert("🚀 HIGH ACCURACY BUY SIGNAL - XAUUSD\nScore: " + str.tostring(bull_score) + "/12\nPrice: " + str.tostring(close) + "\nSL: " + str.tostring(buy_stop_loss) + "\nTP: " + str.tostring(buy_take_profit) + "\nConfidence: VERY HIGH", alert.freq_once_per_bar)

// High Accuracy Sell Alert
if sell_signal
    alert("🚀 HIGH ACCURACY SELL SIGNAL - XAUUSD\nScore: " + str.tostring(bear_score) + "/12\nPrice: " + str.tostring(close) + "\nSL: " + str.tostring(sell_stop_loss) + "\nTP: " + str.tostring(sell_take_profit) + "\nConfidence: VERY HIGH", alert.freq_once_per_bar)